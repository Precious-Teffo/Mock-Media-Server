// server.js
const express = require('express');
const fs = require('fs');
const path = require('path');
const fileHandler = require('./fileHandler');

const app = express();
const PORT = 3000;

const DATA_FILE = path.join(__dirname, 'data.json');
const MEDIA_FOLDER = path.join(__dirname, 'uploads');

// Middleware
app.use(express.json());
app.use('/uploads', express.static(MEDIA_FOLDER));

// Create data file if it doesn't exist
if (!fs.existsSync(DATA_FILE)) {
  fs.writeFileSync(DATA_FILE, '[]');
}

// Ensure media folder exists
if (!fs.existsSync(MEDIA_FOLDER)) {
  fs.mkdirSync(MEDIA_FOLDER);
}

// Serve HTML documentation
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// API: Get all media metadata
app.get('/api/media', (req, res) => {
  const data = fileHandler.readData();
  res.json(data);
});

// API: Add media metadata
app.post('/api/media', (req, res) => {
  const media = req.body;
  if (!media.title || !media.filename || !media.type) {
    return res.status(400).json({ error: 'Missing required fields' });
  }
  const result = fileHandler.addMedia(media);
  res.status(201).json(result);
});

// API: Download media
app.get('/media/:filename', (req, res) => {
  const filePath = path.join(MEDIA_FOLDER, req.params.filename);
  if (fs.existsSync(filePath)) {
    res.download(filePath);
  } else {
    res.status(404).send('File not found');
  }
});

// Handle 404
app.use((req, res) => {
  res.status(404).send('404 - Not Found');
});

app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});


// fileHandler.js
const fs = require('fs');
const path = require('path');

const DATA_FILE = path.join(__dirname, 'data.json');

function readData() {
  const data = fs.readFileSync(DATA_FILE, 'utf8');
  return JSON.parse(data);
}

function writeData(data) {
  fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
}

function addMedia(media) {
  const data = readData();
  media.id = Date.now().toString();
  media.uploadedAt = new Date().toISOString();
  data.push(media);
  writeData(data);
  return media;
}

module.exports = { readData, writeData, addMedia };


// public/index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Mock Media Server API Docs</title>
</head>
<body>
  <h1>Welcome to the Mock Media Server API</h1>
  <p>Use the following endpoints to interact with the server:</p>
  <ul>
    <li><strong>GET /api/media</strong> - Retrieve all media metadata</li>
    <li><strong>POST /api/media</strong> - Add new media metadata (JSON: { title, filename, type })</li>
    <li><strong>GET /media/:filename</strong> - Download a media file</li>
  </ul>
  <p>Send metadata in the following format:</p>
  <pre>{
  "title": "Sample Image",
  "filename": "khutso.jpg",
  "type": "image"
}</pre>
</body>
</html>
