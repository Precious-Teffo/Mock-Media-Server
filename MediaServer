const express = require('express');
const app = express();
const PORT = 3000;

app.use(express.json());

let media = {
  movies: [
    { id: 1, title: 'Inception', director: 'Christopher Nolan', year: 2010 },
    { id: 2, title: 'The Matrix', director: 'Wachowskis', year: 1999 },
  ],
  series: [
    { id: 1, title: 'Breaking Bad', creator: 'Vince Gilligan', seasons: 5 },
    { id: 2, title: 'Stranger Things', creator: 'Duffer Brothers', seasons: 4 },
  ],
  songs: [
    { id: 1, title: 'Bohemian Rhapsody', artist: 'Queen', year: 1975 },
    { id: 2, title: 'Blinding Lights', artist: 'The Weeknd', year: 2019 },
  ],
};

// Function to generate new ID based on last ID
const getNextId = (arr) => (arr.length ? Math.max(...arr.map(item => item.id)) + 1 : 1);

const createRoutes = (type) => {
  // GET
  app.get(`/${type}`, (req, res) => {
    res.json(media[type]);
  });

  // POST
  app.post(`/${type}`, (req, res) => {
    const newItem = { id: getNextId(media[type]), ...req.body };
    media[type].push(newItem);
    res.status(201).json(media[type]);
  });

  // PUT
  app.put(`/${type}/:id`, (req, res) => {
    const index = media[type].findIndex(item => item.id == req.params.id);
    if (index === -1) {
      return res.status(404).json({ message: `${type.slice(0, -1)} not found` });
    }
    media[type][index] = { id: parseInt(req.params.id), ...req.body };
    res.json(media[type]);
  });

  // DELETE
  app.delete(`/${type}/:id`, (req, res) => {
    const index = media[type].findIndex(item => item.id == req.params.id);
    if (index === -1) {
      return res.status(404).json({ message: `${type.slice(0, -1)} not found` });
    }
    media[type].splice(index, 1);
    res.json(media[type]);
  });
};

// Register all media routes
['movies', 'series', 'songs'].forEach(createRoutes);

// Handle unknown routes
app.use((req, res) => {
  res.status(404).send('404 - Not Found');
});

// Start server
app.listen(PORT, () => {
  console.log(`Mock media server running at http://localhost:${PORT}`);
});
